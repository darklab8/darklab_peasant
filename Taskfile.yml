version: '3'

env:
  AWS_ECR_REGION: eu-west-1
  AWS_ECR_ACCOUNT_ID: 286101979574
  APP_NAME: peasant
  APP_VERSION: 0.11
  AWS_ECR_REPO: peasant

tasks:
  celery:app:
    desc: >
      Main application entrypoint.
      Includes celery worker and celery beat.
      Minimal sufficient for app working.
    cmds:
      - celery
        -A peasant.celery worker
        --concurrency=${CELERY_CONCURRENCY}
        -B
        --loglevel ${CELERY_LOGLEVEL} {{.CLI_ARGS}}
    env:
      CELERY_LOGLEVEL: INFO
      CELERY_CONCURRENCY: "1"

  celery:monitoring:
    desc: Monitoring system to celery
    cmds:
      - celery -A peasant.celery flower
  
  test:unit:
    desc: Run unit tests
    cmds:
      - pytest

  test:types:
    desc: Run static typing checks
    cmds:
      - mypy peasant

  test:format:
    desc: Run format checks
    cmds:
      - task: format
        vars: { CLI_ARGS: '--check' }

  format:
    desc: Format code
    cmds: 
      - black peasant {{.CLI_ARGS}}

  test:
    desc: Run all tests
    cmds:
      - task: test:types
      - task: test:unit
      - task: test:format

  docker:login:
    cmds:
      - aws ecr get-login-password --region ${AWS_ECR_REGION} | docker login --username AWS --password-stdin ${AWS_ECR_ACCOUNT_ID}.dkr.ecr.${AWS_ECR_REGION}.amazonaws.com

  docker:build:
    cmds:
      - docker build --tag ${APP_NAME}:${APP_VERSION} .
      - docker tag ${APP_NAME}:${APP_VERSION} ${AWS_ECR_ACCOUNT_ID}.dkr.ecr.${AWS_ECR_REGION}.amazonaws.com/${AWS_ECR_REPO}:${APP_VERSION}
  
  docker:push:
    cmds:
      - docker push ${AWS_ECR_ACCOUNT_ID}.dkr.ecr.${AWS_ECR_REGION}.amazonaws.com/${AWS_ECR_REPO}:${APP_VERSION}
  
  docker:run:
    cmds:
      - docker run
          -v ~/.aws-lambda-rie:/aws-lambda
          -p 9000:8080
          --entrypoint /aws-lambda/aws-lambda-rie
          ${AWS_ECR_ACCOUNT_ID}.dkr.ecr.${AWS_ECR_REGION}.amazonaws.com/${AWS_ECR_REPO}:${APP_VERSION}
          /usr/local/bin/python -m awslambdaric peasant.lambda_function.handler

  docker:test:
    cmds:
      - curl -XPOST 'http://localhost:9000/2015-03-31/functions/function/invocations' -d '{{.DATA}}'
    vars:
      DATA:
        sh: python3 -c "import json; file = open('.env.json'); data = file.read(); loaded = json.loads(data); print(json.dumps(loaded))"

  aws:test:
    cmds:
      - aws lambda invoke --function-name peasant response.json

  aws:install:emulator:
    cmds:
      # https://docs.aws.amazon.com/lambda/latest/dg/python-image.html#python-image-instructions
      - mkdir -p ~/.aws-lambda-rie && \
          curl -Lo ~/.aws-lambda-rie/aws-lambda-rie https://github.com/aws/aws-lambda-runtime-interface-emulator/releases/latest/download/aws-lambda-rie && \
          chmod +x ~/.aws-lambda-rie/aws-lambda-rie